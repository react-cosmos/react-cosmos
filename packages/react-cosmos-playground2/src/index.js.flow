// @flow

import type { StateUpdater } from 'react-cosmos-shared2/util';
import type { RendererId, FixtureNames } from 'react-cosmos-shared2/renderer';

export type PlaygroundOptions = {
  rendererUrl: string
};

export type PlaygroundState = {
  core: {
    renderers: RendererId[],
    fixtures: FixtureNames
  },
  [pluginName: string]: Object
};

export type Methods = { [methodName: string]: Function };

// NOTE(vision): Most of the playground context will be absorbed by private
// plugin state and public plugin methods. Plugins will communicate through
// globally-bound public methods and won't need to import and depend on any
// statically-bound context. Also not all plugins have UI, so the plugin state
// API needs to be React agnostic.
export type PlaygroundContextValue = {
  options: PlaygroundOptions,
  state: PlaygroundState,
  setState: <T>(
    pluginName: string,
    stateChange: StateUpdater<T>,
    cb?: () => mixed
  ) => void,
  // returns unsubscribe function
  registerMethods: Methods => () => void,
  callMethod: (methodName: string, ...args: any) => any,
  // returns unsubscribe function
  addEventListener: (eventName: string, listener: Function) => () => void,
  emitEvent: (eventName: string, ...args: any) => void
};
