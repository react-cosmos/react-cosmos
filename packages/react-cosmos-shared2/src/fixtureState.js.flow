// @flow

// This type might be silly, but it should be stricter than `Object`
export type KeyValue = { [string]: mixed };

export type FixtureDecoratorId = number;

export type FixtureStateValue = {
  serializable: boolean,
  key: string,
  stringified: string
};

export type FixtureStateValues = FixtureStateValue[];

export type PropsFixtureState = {
  decoratorId: FixtureDecoratorId,
  elPath: string,
  componentName: string,
  renderKey: number,
  values: FixtureStateValues
};

export type StateFixtureState = {
  decoratorId: FixtureDecoratorId,
  elPath: string,
  componentName: string,
  values: FixtureStateValues
};

export type FixtureState = {
  props?: PropsFixtureState[],
  state?: StateFixtureState[],
  [key: string]: mixed
};

export type FixtureStateMatcher = StateFixtureState => boolean;

declare export function extractValuesFromObject(
  obj: KeyValue
): FixtureStateValues;

declare export function extendObjectWithValues(
  obj: KeyValue,
  values: FixtureStateValues
): KeyValue;

declare export function getPropsFixtureState(
  fixtureState: ?FixtureState,
  matcher?: (PropsFixtureState) => boolean
): PropsFixtureState[];

declare export function updatePropsFixtureState({
  fixtureState: ?FixtureState,
  decoratorId: FixtureDecoratorId,
  elPath: string,
  values: FixtureStateValues,
  resetInstance?: boolean
}): PropsFixtureState[];

declare export function getStateFixtureState(
  fixtureState: ?FixtureState,
  matcher?: (PropsFixtureState) => boolean
): StateFixtureState[];

declare export function updateStateFixtureState({
  fixtureState: ?FixtureState,
  decoratorId: FixtureDecoratorId,
  elPath: string,
  values: FixtureStateValues
}): StateFixtureState[];

declare export function createFxStateMatcher(
  decoratorId: FixtureDecoratorId
): FixtureStateMatcher;

declare export function createElFxStateMatcher(
  decoratorId: FixtureDecoratorId,
  elPath: string
): FixtureStateMatcher;
