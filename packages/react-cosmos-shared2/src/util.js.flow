// @flow

import type { Predicate } from 'lodash';

export type StateUpdater<T> = $Shape<T> | ((prevState: null | T) => $Shape<T>);

export type SetState<T> = (
  updater: StateUpdater<T>,
  callback?: () => mixed
) => mixed;

declare export function updateItem<T>(
  items: $ReadOnlyArray<T>,
  item: T,
  update: $Shape<T>
): Array<T>;

declare export function replaceOrAddItem<T>(
  items: $ReadOnlyArray<T>,
  matcher: Predicate<T>,
  item: T
): Array<T>;

declare export function removeItemMatch<T>(
  items: $ReadOnlyArray<T>,
  matcher: Predicate<T>
): Array<T>;

declare export function removeItem<T>(
  items: $ReadOnlyArray<T>,
  item: T
): Array<T>;

declare export function updateState<T>(
  fixtureState: null | T,
  updater: StateUpdater<T>
): T;

declare export function replaceState<T>(
  fixtureState: null | T,
  updater: StateUpdater<T>
): T;

declare export function replaceKeys(string, { [key: string]: string }): string;
