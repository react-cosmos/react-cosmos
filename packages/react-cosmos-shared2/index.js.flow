// @flow

export type { StateUpdater, SetState } from './types/state';

export type {
  FixtureStateValue,
  FixtureStateValues,
  FixtureState
} from './types/fixtureState';

export type {
  RendererId,
  FixtureNames,
  RendererRequest,
  OnRendererRequest,
  RendererResponse,
  OnRendererResponse
} from './types/messages';

import type { Predicate } from 'lodash';
import type { StateUpdater } from './types/state';
import type {
  FixtureStateValues,
  FixtureStateProps,
  FixtureStateState,
  FixtureState
} from './types/fixtureState';
import type { RendererId } from './types/messages';

declare export var RENDERER_ID: RendererId;

declare export function updateItem<T>(
  items: $ReadOnlyArray<T>,
  item: T,
  update: $Shape<T>
): Array<T>;

declare export function replaceOrAddItem<T>(
  items: $ReadOnlyArray<T>,
  matcher: Predicate<T>,
  item: T
): Array<T>;

declare export function remoteItem<T>(
  items: $ReadOnlyArray<T>,
  item: T
): Array<T>;

declare export function extractValuesFromObject(obj: {
  [string]: mixed
}): FixtureStateValues;

declare export function updateState<T>(
  fixtureState: ?T,
  updater: StateUpdater<T>
): T;

declare export function getFixtureStateProps(
  fixtureState: ?FixtureState
): FixtureStateProps[];

declare export function getFixtureStatePropsInst(
  fixtureState: ?FixtureState,
  instanceId: number
): FixtureStateProps;

declare export function updateFixtureStateProps(
  fixtureState: ?FixtureState,
  instanceId: number,
  newProps: { [key: string]: mixed },
  resetInstance?: boolean
): FixtureStateProps[];

declare export function getFixtureStateState(
  fixtureState: ?FixtureState
): FixtureStateState[];

declare export function getFixtureStateStateInst(
  fixtureState: ?FixtureState,
  instanceId: number
): FixtureStateState;

declare export function updateFixtureStateState(
  fixtureState: ?FixtureState,
  instanceId: number,
  newState: { [key: string]: mixed }
): FixtureStateState[];
