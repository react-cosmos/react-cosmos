/**
 * @flow
 * @jest-environment node
 */

import { join } from 'path';
import { readFile, copy, remove } from 'fs-extra';
import until from 'async-until';
import {
  defaultFileMatch as mockFileMatch,
  defaultFileMatchIgnore as mockFileMatchIgnore,
  defaultExclude as mockExclude
} from 'react-cosmos-shared/server';
import { startServer } from '../start';

const mockRootPath = join(__dirname, '__fsmocks__');
const mockProxiesPath = join(mockRootPath, 'cosmos.proxies');
const mockModulesPath = join(__dirname, '__fsoutput__/cosmos.modules.js');

jest.mock('react-cosmos-config', () => ({
  getCosmosConfig: () => ({
    rootPath: mockRootPath,
    port: 10002,
    hostname: null,
    publicUrl: '/',
    fileMatch: mockFileMatch,
    fileMatchIgnore: mockFileMatchIgnore,
    exclude: mockExclude,
    proxiesPath: mockProxiesPath,
    modulesPath: mockModulesPath
  })
}));

let stopServer;

beforeEach(async () => {
  jest.clearAllMocks();
  stopServer = await startServer();
  await copy(
    join(mockRootPath, 'MyComponent.fixture.js'),
    join(mockRootPath, 'jestnowatch.fixture.js')
  );
});

afterEach(async () => {
  await stopServer();
  await remove(mockModulesPath);
  await remove(join(mockRootPath, 'jestnowatch.fixture.js'));
});

it('re-generates modules file on new fixture file ', async () => {
  const fixturePath = join(mockRootPath, 'MyComponent.fixture.js');
  const fixturePathNew = join(mockRootPath, 'jestnowatch.fixture.js');
  const componentPath = join(mockRootPath, 'MyComponent.js');
  const fixtureFiles = [
    {
      filePath: fixturePathNew,
      components: [{ name: 'MyComponent', filePath: componentPath }]
    },
    {
      filePath: fixturePath,
      components: [{ name: 'MyComponent', filePath: componentPath }]
    }
  ];

  // Wait for fs event to be picked up
  const untilOpts = {
    loopDelay: 200,
    timeout: 2000,
    failMsg: 'cosmos.modules file has not been updated'
  };
  await until(async () => {
    const output = await readFile(mockModulesPath, 'utf8');
    return (
      output ===
      `// This file is automatically generated by Cosmos. Best ignore it.
export const options = {
  port: 10002
};

export function getUserModules() {
  return {
    fixtureModules: {'${fixturePathNew}':require('${fixturePathNew}'),'${fixturePath}':require('${fixturePath}')},
    fixtureFiles: ${JSON.stringify(fixtureFiles)},
    proxies: require('${mockProxiesPath}')
  }
};\n`
    );
  }, untilOpts);
});
