import path from 'path';
import slash from 'slash';
import { Json } from './shared';

type Args = {
  globalImports: string[];
  fixturePaths: string[];
  decoratorPaths: string[];
  rendererConfig: Json;
  rootDir: string;
  relativeToDir: string | null;
};
export function userDepsTemplate({
  globalImports,
  fixturePaths,
  decoratorPaths,
  rendererConfig,
  rootDir,
  relativeToDir,
}: Args) {
  const fixtures = createImportMap(fixturePaths, rootDir, relativeToDir);
  const fixtureKeys = Object.keys(fixtures);

  const decorators = createImportMap(decoratorPaths, rootDir, relativeToDir);
  const decoratorKeys = Object.keys(decorators);

  return `
// This file is automatically generated by Cosmos. Add it to .gitignore and
// only edit if you know what you're doing.

// Keeping global imports here is superior to making them bundle entry points
// because this way they become hot-reloadable.
${globalImports
  .map(p => `import '${resolveImportPath(p, relativeToDir)}';`)
  .join(`\n`)}

${fixtureKeys
  .map((k, i) => `import fixture${i} from '${fixtures[k]}';`)
  .join(`\n`)}

${decoratorKeys
  .map((k, i) => `import decorator${i} from '${decorators[k]}';`)
  .join(`\n`)}

export const rendererConfig = ${JSON.stringify(rendererConfig, null, 2)};

export const fixtures = {
${fixtureKeys.map((k, i) => `  '${k}': fixture${i}`).join(`,\n`)}
};

export const decorators = {
${decoratorKeys.map((k, i) => `  '${k}': decorator${i}`).join(`,\n`)}
};
`.trimLeft();
}

function createImportMap(
  paths: string[],
  rootDir: string,
  relativeToDir: string | null
): Record<string, string> {
  return paths.reduce(
    (acc, p) => ({
      ...acc,
      [slash(path.relative(rootDir, p))]: resolveImportPath(p, relativeToDir),
    }),
    {}
  );
}

function resolveImportPath(filePath: string, relativeToDir: string | null) {
  return relativeToDir
    ? `.${path.sep}${path.relative(relativeToDir, filePath)}`
    : filePath;
}
