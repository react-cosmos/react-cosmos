import { flatten } from 'lodash-es';
import {
  userDepsImportMap,
  userDepsImportPath,
  UserDepsTemplateArgs,
} from './userDepsShared.js';

export function userDepsLazyTemplate({
  globalImports,
  fixturePaths,
  decoratorPaths,
  rendererConfig,
  rootDir,
  relativeToDir,
  typeScript,
}: UserDepsTemplateArgs) {
  function ext(importPath: string) {
    return typeScript ? importPath.replace(/\.tsx?$/, '.js') : importPath;
  }

  function ifTS(str: string) {
    return typeScript ? str : '';
  }

  const globalImportItems = globalImports.map(
    p => `import '${ext(userDepsImportPath(p, relativeToDir))}';`
  );

  const fixtures = userDepsImportMap(fixturePaths, rootDir, relativeToDir);
  const fixtureKeys = Object.keys(fixtures);
  const fixtureItems = fixtureKeys.map(
    k => `  '${k}': { getModule: () => import('${ext(fixtures[k])}') }`
  );

  const decorators = userDepsImportMap(decoratorPaths, rootDir, relativeToDir);
  const decoratorKeys = Object.keys(decorators);
  const decoratorItems = decoratorKeys.map(
    k => `  '${k}': { getModule: () => import('${ext(decorators[k])}') }`
  );

  const rendererConfigStr = JSON.stringify(rendererConfig, null, 2);

  let importGroups = [globalImportItems];
  if (typeScript) {
    importGroups.unshift([
      `import { RendererConfig, UserModuleWrappers } from 'react-cosmos-core';`,
    ]);
  }

  return `
// This file is automatically generated by Cosmos. Add it to .gitignore and
// only edit if you know what you're doing.
${importsStr(importGroups)}
export const rendererConfig${ifTS(': RendererConfig')} = ${rendererConfigStr};

const fixtures = {${objBody(fixtureItems)}};

const decorators = {${objBody(decoratorItems)}};

export const moduleWrappers${ifTS(': UserModuleWrappers')} = {
  lazy: true,
  fixtures,
  decorators,
};
`.trimStart();
}

function importsStr(items: string[][]) {
  if (flatten(items).length === 0) {
    return '';
  }

  const str = items
    .filter(rows => rows.length > 0)
    .map(rows => rows.join('\n'))
    .join('\n\n');

  return `\n${str}\n`;
}

function objBody(items: string[]) {
  return items.length > 0 ? `\n${items.join(`,\n`)}\n` : '';
}
