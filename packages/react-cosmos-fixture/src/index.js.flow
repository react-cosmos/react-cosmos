// @flow

import type { Node, Element, ComponentType, Context } from 'react';
import type {
  FixtureDecoratorId,
  FixtureState,
  SetFixtureState
} from 'react-cosmos-shared2/fixtureState';
import type {
  OnRendererRequest,
  OnRendererResponse
} from 'react-cosmos-shared2/renderer';

export type Fixtures = {
  [path: string]: Node
};

export type DecoratorType = ComponentType<{ children: Node }>;

export type DecoratorsByPath = {
  [path: string]: DecoratorType
};

export type RemoteRendererApi = {
  subscribe: OnRendererRequest => mixed,
  unsubscribe: () => mixed,
  postMessage: OnRendererResponse
};

export type FixtureConnectProps = {
  rendererId: string,
  fixtures: Fixtures,
  systemDecorators: DecoratorType[],
  userDecorators: DecoratorsByPath,
  onFixtureChange?: () => mixed
} & RemoteRendererApi;

export type PostMessageProps = {
  children: RemoteRendererApi => Element<any>
};

export type WebSocketsProps = {
  children: RemoteRendererApi => Element<any>,
  url: string
};

export type FixtureContextValue = {
  fixtureState: null | FixtureState,
  setFixtureState: SetFixtureState
};

export type FixtureCaptureProps = {
  children: Node,
  decoratorId: FixtureDecoratorId
};

declare export var FixtureConnect: ComponentType<FixtureConnectProps>;
declare export var PostMessage: ComponentType<PostMessageProps>;
declare export var WebSockets: ComponentType<WebSocketsProps>;

declare export var FixtureContext: Context<FixtureContextValue>;
declare export var FixtureCapture: ComponentType<FixtureCaptureProps>;
